{"version":3,"sources":["views/ui-elements/data-list/Percent.js","views/charts/apex/ApexAreaCharts.js","views/charts/apex/AreaCharts.js","views/charts/apex/AreaCharts1.js","views/charts/apex/Report.js","views/charts/apex/ApexCharts.js"],"names":["GoalOverview","state","options","chart","sparkline","enabled","dropShadow","blur","left","top","opacity","colors","props","success","plotOptions","radialBar","size","startAngle","endAngle","hollow","track","background","strokeColor","strokeWidth","dataLabels","name","show","value","offsetY","color","fontSize","fill","type","gradient","shade","shadeIntensity","gradientToColors","inverseColors","opacityFrom","opacityTo","stops","stroke","lineCap","series","percent","this","title","height","React","Component","ApexAreaCharts","modifydata","data","flag","second","date","wealth","x","push","Math","round","portfolio_wealth","performance","id","xaxis","categories","tickAmount","curve","themeColors","grid","row","legend","tooltip","format","AreaCharts","filingdate","transactionvalue","Card","CardHeader","CardTitle","CardBody","AreaCharts1","calendardate","columns","selector","render","text","grow","sortable","inst_columns","net_inst_columns","Report","docs","fetchPosts","today","Date","setDate","getDate","toISOString","slice","axios","get","encodeURI","ticker_name","then","res","sorted","setState","console","log","newProps","className","Row","Col","lg","sm","price","wealth_graph","gutter","company_health","span","rev_growth","rev_uncertainty","profit_margin","market_share_growth","company_yield","dividend_yield","earnings_yield","payout_ratio","free_cash_flow","company_quality","debt_to_equity","return_on_invested_capital","roe_growth","roe_uncertainty","fair_value_score","fair_value_ddm","fair_value_fcf","industry_rank","profitability_rank","value_rank","quality_rank","risk_score","vol","max_drawdown","correl","net_value_executed_pct","buy_value","top10_buys","scroll","noHeader","sell_value","top10_sells","net_holding_pct","net_inst_value","net_inst_by_date","top10_inst","ApexCharts","articles","isPostLoading","getShares","net_inst_by_date_shr","i","length","securitytype","fetchArticles","articleID","match","params","token","Fragment","to","connect","auth"],"mappings":"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","file":"static/js/18.9e01ebc3.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\r\nimport Chart from \"react-apexcharts\"\r\n\r\nclass GoalOverview extends React.Component {\r\n  state = {\r\n    options: {\r\n      chart: {\r\n        sparkline: {\r\n          enabled: true\r\n        },\r\n        dropShadow: {\r\n          enabled: true,\r\n          blur: 3,\r\n          left: 1,\r\n          top: 1,\r\n          opacity: 0.1\r\n        }\r\n      },\r\n      colors: [this.props.success],\r\n      plotOptions: {\r\n        radialBar: {\r\n          size: 110,\r\n          startAngle: -140,\r\n          endAngle: 150,\r\n          hollow: {\r\n            size: \"77%\"\r\n          },\r\n          track: {\r\n            background: this.props.strokeColor,\r\n            strokeWidth: \"50%\"\r\n          },\r\n          dataLabels: {\r\n            name: {\r\n              show: false\r\n            },\r\n            value: {\r\n              offsetY: 18,\r\n              color: this.props.strokeColor,\r\n              fontSize: \"4rem\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      fill: {\r\n        type: \"gradient\",\r\n        gradient: {\r\n          shade: \"dark\",\r\n          type: \"horizontal\",\r\n          shadeIntensity: 0.5,\r\n          gradientToColors: [\"#00b5b5\"],\r\n          inverseColors: true,\r\n          opacityFrom: 1,\r\n          opacityTo: 1,\r\n          stops: [0, 100]\r\n        }\r\n      },\r\n      stroke: {\r\n        lineCap: \"round\"\r\n      }\r\n    },\r\n    series: [this.props.percent]\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{this.props.title}</CardTitle>\r\n        </CardHeader><hr/>\r\n        <CardBody>\r\n          <Chart\r\n            options={this.state.options}\r\n            series={[this.props.percent]}\r\n            type=\"radialBar\"\r\n            height={200}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default GoalOverview\r\n","import React from \"react\"\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\nimport Chart from \"react-apexcharts\"\n\nclass ApexAreaCharts extends React.Component {\n  modifydata = (data, flag, second) => {\n    let date = [], wealth = [];\n    for (let x in data) {\n      date.push(data[x].date);\n      if (second == 0) wealth.push(Math.round(data[x].portfolio_wealth * 100) / 100);\n      else wealth.push(Math.round(data[x].performance * 100) / 100);\n    }\n    if (!flag) return date;\n    else return wealth;\n  }\n\n  render() {\n    const options = {\n      chart: {\n        id: \"areaChart\"\n      },\n      xaxis: {\n        type: \"date\",\n        categories: this.modifydata(this.props.data, 0, this.props.second),\n        tickAmount: 8\n      },\n      stroke: {\n        curve: \"smooth\"\n      },\n      dataLabels: {\n        enabled: false\n      },\n      colors: this.props.themeColors,\n      grid: {\n        row: {\n          colors: [\"#f3f3f3\", \"transparent\"],\n          opacity: 0.5\n        }\n      },\n      legend: {\n        offsetY: -10\n      },\n      tooltip: {\n        x: {\n          format: \"dd/MM/yy\"\n        }\n      }\n    };\n    const series = [\n      {\n        name: \"series1\",\n        data: this.modifydata(this.props.data, 1, this.props.second)\n      }\n    ];\n\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>{this.props.title}</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Chart\n            options={options}\n            series={series}\n            type=\"area\"\n            height={500}\n          />\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default ApexAreaCharts\n","import React from \"react\"\r\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\r\nimport Chart from \"react-apexcharts\"\r\n\r\nclass AreaCharts extends React.Component {\r\n    modifydata = (data, flag) => {\r\n        let date = [], wealth = [];\r\n        for (let x in data) {\r\n            date.push(data[x].filingdate);\r\n            wealth.push(Math.round(data[x].transactionvalue * 100) / 100);\r\n        }\r\n        if (!flag) return date;\r\n        else return wealth;\r\n    }\r\n  render() {\r\n    const options = {\r\n        chart: {\r\n          id: \"areaChart\"\r\n        },\r\n        xaxis: {\r\n          type: \"date\",\r\n          categories: this.modifydata(this.props.data, 0),\r\n          tickAmount: 8\r\n        },\r\n        stroke: {\r\n          curve: \"smooth\"\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        colors: this.props.themeColors,\r\n        grid: {\r\n          row: {\r\n            colors: [\"#f3f3f3\", \"transparent\"],\r\n            opacity: 0.5\r\n          }\r\n        },\r\n        legend: {\r\n          offsetY: -10\r\n        },\r\n        tooltip: {\r\n          x: {\r\n            format: \"dd/MM/yy\"\r\n          }\r\n        }\r\n      };\r\n      const series = [\r\n        {\r\n          name: \"series1\",\r\n          data: this.modifydata(this.props.data, 1)\r\n        }\r\n      ];\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{this.props.title}</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Chart\r\n            options={options}\r\n            series={series}\r\n            type=\"area\"\r\n            height={400}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default AreaCharts\r\n","import React from \"react\"\r\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\r\nimport Chart from \"react-apexcharts\"\r\n\r\nclass AreaCharts1 extends React.Component {\r\n    modifydata = (data, flag) => {\r\n        let date = [], wealth = [];\r\n        for (let x in data) {\r\n            date.push(data[x].calendardate);\r\n            wealth.push(Math.round(data[x].value * 100) / 100);\r\n        }\r\n        if (!flag) return date;\r\n        else return wealth;\r\n    }\r\n  render() {\r\n    const options = {\r\n        chart: {\r\n          id: \"areaChart\"\r\n        },\r\n        xaxis: {\r\n          type: \"date\",\r\n          categories: this.modifydata(this.props.data, 0),\r\n          tickAmount: 8\r\n        },\r\n        stroke: {\r\n          curve: \"smooth\"\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        colors: this.props.themeColors,\r\n        grid: {\r\n          row: {\r\n            colors: [\"#f3f3f3\", \"transparent\"],\r\n            opacity: 0.5\r\n          }\r\n        },\r\n        legend: {\r\n          offsetY: -10\r\n        },\r\n        tooltip: {\r\n          x: {\r\n            format: \"dd/MM/yy\"\r\n          }\r\n        }\r\n      };\r\n      const series = [\r\n        {\r\n          name: \"series1\",\r\n          data: this.modifydata(this.props.data, 1)\r\n        }\r\n      ];\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{this.props.title}</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Chart\r\n            options={options}\r\n            series={series}\r\n            type=\"area\"\r\n            height={400}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default AreaCharts1\r\n","import React from 'react';\r\nimport { Table, Divider, Statistic, Progress } from 'antd';\r\nimport {\r\n  Card,\r\n  CardImg,\r\n  Container,\r\n  Col,\r\n  Row,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  Spinner,\r\n} from \"reactstrap\"\r\nimport { List } from \"antd\";\r\nimport * as Icon from 'react-feather';\r\nimport axios from \"axios\";\r\nimport GoalOverview from \"../../ui-elements/data-list/Percent\"\r\nimport ApexAreaCharts from \"./ApexAreaCharts\"\r\nimport AreaCharts from \"./AreaCharts\"\r\nimport AreaCharts1 from \"./AreaCharts1\"\r\nimport DataTable from \"react-data-table-component\"\r\nconst isoCountries = {\r\n  'AF' : 'Afghanistan',\r\n  'AX' : 'Aland Islands',\r\n  'AL' : 'Albania',\r\n  'DZ' : 'Algeria',\r\n  'AS' : 'American Samoa',\r\n  'AD' : 'Andorra',\r\n  'AO' : 'Angola',\r\n  'AI' : 'Anguilla',\r\n  'AQ' : 'Antarctica',\r\n  'AG' : 'Antigua And Barbuda',\r\n  'AR' : 'Argentina',\r\n  'AM' : 'Armenia',\r\n  'AW' : 'Aruba',\r\n  'AU' : 'Australia',\r\n  'AT' : 'Austria',\r\n  'AZ' : 'Azerbaijan',\r\n  'BS' : 'Bahamas',\r\n  'BH' : 'Bahrain',\r\n  'BD' : 'Bangladesh',\r\n  'BB' : 'Barbados',\r\n  'BY' : 'Belarus',\r\n  'BE' : 'Belgium',\r\n  'BZ' : 'Belize',\r\n  'BJ' : 'Benin',\r\n  'BM' : 'Bermuda',\r\n  'BT' : 'Bhutan',\r\n  'BO' : 'Bolivia',\r\n  'BA' : 'Bosnia And Herzegovina',\r\n  'BW' : 'Botswana',\r\n  'BV' : 'Bouvet Island',\r\n  'BR' : 'Brazil',\r\n  'IO' : 'British Indian Ocean Territory',\r\n  'BN' : 'Brunei Darussalam',\r\n  'BG' : 'Bulgaria',\r\n  'BF' : 'Burkina Faso',\r\n  'BI' : 'Burundi',\r\n  'KH' : 'Cambodia',\r\n  'CM' : 'Cameroon',\r\n  'CA' : 'Canada',\r\n  'CV' : 'Cape Verde',\r\n  'KY' : 'Cayman Islands',\r\n  'CF' : 'Central African Republic',\r\n  'TD' : 'Chad',\r\n  'CL' : 'Chile',\r\n  'CN' : 'China',\r\n  'CX' : 'Christmas Island',\r\n  'CC' : 'Cocos (Keeling) Islands',\r\n  'CO' : 'Colombia',\r\n  'KM' : 'Comoros',\r\n  'CG' : 'Congo',\r\n  'CD' : 'Congo, Democratic Republic',\r\n  'CK' : 'Cook Islands',\r\n  'CR' : 'Costa Rica',\r\n  'CI' : 'Cote D\\'Ivoire',\r\n  'HR' : 'Croatia',\r\n  'CU' : 'Cuba',\r\n  'CY' : 'Cyprus',\r\n  'CZ' : 'Czech Republic',\r\n  'DK' : 'Denmark',\r\n  'DJ' : 'Djibouti',\r\n  'DM' : 'Dominica',\r\n  'DO' : 'Dominican Republic',\r\n  'EC' : 'Ecuador',\r\n  'EG' : 'Egypt',\r\n  'SV' : 'El Salvador',\r\n  'GQ' : 'Equatorial Guinea',\r\n  'ER' : 'Eritrea',\r\n  'EE' : 'Estonia',\r\n  'ET' : 'Ethiopia',\r\n  'FK' : 'Falkland Islands (Malvinas)',\r\n  'FO' : 'Faroe Islands',\r\n  'FJ' : 'Fiji',\r\n  'FI' : 'Finland',\r\n  'FR' : 'France',\r\n  'GF' : 'French Guiana',\r\n  'PF' : 'French Polynesia',\r\n  'TF' : 'French Southern Territories',\r\n  'GA' : 'Gabon',\r\n  'GM' : 'Gambia',\r\n  'GE' : 'Georgia',\r\n  'DE' : 'Germany',\r\n  'GH' : 'Ghana',\r\n  'GI' : 'Gibraltar',\r\n  'GR' : 'Greece',\r\n  'GL' : 'Greenland',\r\n  'GD' : 'Grenada',\r\n  'GP' : 'Guadeloupe',\r\n  'GU' : 'Guam',\r\n  'GT' : 'Guatemala',\r\n  'GG' : 'Guernsey',\r\n  'GN' : 'Guinea',\r\n  'GW' : 'Guinea-Bissau',\r\n  'GY' : 'Guyana',\r\n  'HT' : 'Haiti',\r\n  'HM' : 'Heard Island & Mcdonald Islands',\r\n  'VA' : 'Holy See (Vatican City State)',\r\n  'HN' : 'Honduras',\r\n  'HK' : 'Hong Kong',\r\n  'HU' : 'Hungary',\r\n  'IS' : 'Iceland',\r\n  'IN' : 'India',\r\n  'ID' : 'Indonesia',\r\n  'IR' : 'Iran, Islamic Republic Of',\r\n  'IQ' : 'Iraq',\r\n  'IE' : 'Ireland',\r\n  'IM' : 'Isle Of Man',\r\n  'IL' : 'Israel',\r\n  'IT' : 'Italy',\r\n  'JM' : 'Jamaica',\r\n  'JP' : 'Japan',\r\n  'JE' : 'Jersey',\r\n  'JO' : 'Jordan',\r\n  'KZ' : 'Kazakhstan',\r\n  'KE' : 'Kenya',\r\n  'KI' : 'Kiribati',\r\n  'KR' : 'Korea',\r\n  'KW' : 'Kuwait',\r\n  'KG' : 'Kyrgyzstan',\r\n  'LA' : 'Lao People\\'s Democratic Republic',\r\n  'LV' : 'Latvia',\r\n  'LB' : 'Lebanon',\r\n  'LS' : 'Lesotho',\r\n  'LR' : 'Liberia',\r\n  'LY' : 'Libyan Arab Jamahiriya',\r\n  'LI' : 'Liechtenstein',\r\n  'LT' : 'Lithuania',\r\n  'LU' : 'Luxembourg',\r\n  'MO' : 'Macao',\r\n  'MK' : 'Macedonia',\r\n  'MG' : 'Madagascar',\r\n  'MW' : 'Malawi',\r\n  'MY' : 'Malaysia',\r\n  'MV' : 'Maldives',\r\n  'ML' : 'Mali',\r\n  'MT' : 'Malta',\r\n  'MH' : 'Marshall Islands',\r\n  'MQ' : 'Martinique',\r\n  'MR' : 'Mauritania',\r\n  'MU' : 'Mauritius',\r\n  'YT' : 'Mayotte',\r\n  'MX' : 'Mexico',\r\n  'FM' : 'Micronesia, Federated States Of',\r\n  'MD' : 'Moldova',\r\n  'MC' : 'Monaco',\r\n  'MN' : 'Mongolia',\r\n  'ME' : 'Montenegro',\r\n  'MS' : 'Montserrat',\r\n  'MA' : 'Morocco',\r\n  'MZ' : 'Mozambique',\r\n  'MM' : 'Myanmar',\r\n  'NA' : 'Namibia',\r\n  'NR' : 'Nauru',\r\n  'NP' : 'Nepal',\r\n  'NL' : 'Netherlands',\r\n  'AN' : 'Netherlands Antilles',\r\n  'NC' : 'New Caledonia',\r\n  'NZ' : 'New Zealand',\r\n  'NI' : 'Nicaragua',\r\n  'NE' : 'Niger',\r\n  'NG' : 'Nigeria',\r\n  'NU' : 'Niue',\r\n  'NF' : 'Norfolk Island',\r\n  'MP' : 'Northern Mariana Islands',\r\n  'NO' : 'Norway',\r\n  'OM' : 'Oman',\r\n  'PK' : 'Pakistan',\r\n  'PW' : 'Palau',\r\n  'PS' : 'Palestinian Territory, Occupied',\r\n  'PA' : 'Panama',\r\n  'PG' : 'Papua New Guinea',\r\n  'PY' : 'Paraguay',\r\n  'PE' : 'Peru',\r\n  'PH' : 'Philippines',\r\n  'PN' : 'Pitcairn',\r\n  'PL' : 'Poland',\r\n  'PT' : 'Portugal',\r\n  'PR' : 'Puerto Rico',\r\n  'QA' : 'Qatar',\r\n  'RE' : 'Reunion',\r\n  'RO' : 'Romania',\r\n  'RU' : 'Russian Federation',\r\n  'RW' : 'Rwanda',\r\n  'BL' : 'Saint Barthelemy',\r\n  'SH' : 'Saint Helena',\r\n  'KN' : 'Saint Kitts And Nevis',\r\n  'LC' : 'Saint Lucia',\r\n  'MF' : 'Saint Martin',\r\n  'PM' : 'Saint Pierre And Miquelon',\r\n  'VC' : 'Saint Vincent And Grenadines',\r\n  'WS' : 'Samoa',\r\n  'SM' : 'San Marino',\r\n  'ST' : 'Sao Tome And Principe',\r\n  'SA' : 'Saudi Arabia',\r\n  'SN' : 'Senegal',\r\n  'RS' : 'Serbia',\r\n  'SC' : 'Seychelles',\r\n  'SL' : 'Sierra Leone',\r\n  'SG' : 'Singapore',\r\n  'SK' : 'Slovakia',\r\n  'SI' : 'Slovenia',\r\n  'SB' : 'Solomon Islands',\r\n  'SO' : 'Somalia',\r\n  'ZA' : 'South Africa',\r\n  'GS' : 'South Georgia And Sandwich Isl.',\r\n  'ES' : 'Spain',\r\n  'LK' : 'Sri Lanka',\r\n  'SD' : 'Sudan',\r\n  'SR' : 'Suriname',\r\n  'SJ' : 'Svalbard And Jan Mayen',\r\n  'SZ' : 'Swaziland',\r\n  'SE' : 'Sweden',\r\n  'CH' : 'Switzerland',\r\n  'SY' : 'Syrian Arab Republic',\r\n  'TW' : 'Taiwan',\r\n  'TJ' : 'Tajikistan',\r\n  'TZ' : 'Tanzania',\r\n  'TH' : 'Thailand',\r\n  'TL' : 'Timor-Leste',\r\n  'TG' : 'Togo',\r\n  'TK' : 'Tokelau',\r\n  'TO' : 'Tonga',\r\n  'TT' : 'Trinidad And Tobago',\r\n  'TN' : 'Tunisia',\r\n  'TR' : 'Turkey',\r\n  'TM' : 'Turkmenistan',\r\n  'TC' : 'Turks And Caicos Islands',\r\n  'TV' : 'Tuvalu',\r\n  'UG' : 'Uganda',\r\n  'UA' : 'Ukraine',\r\n  'AE' : 'United Arab Emirates',\r\n  'GB' : 'United Kingdom',\r\n  'US' : 'United States',\r\n  'UM' : 'United States Outlying Islands',\r\n  'UY' : 'Uruguay',\r\n  'UZ' : 'Uzbekistan',\r\n  'VU' : 'Vanuatu',\r\n  'VE' : 'Venezuela',\r\n  'VN' : 'Viet Nam',\r\n  'VG' : 'Virgin Islands, British',\r\n  'VI' : 'Virgin Islands, U.S.',\r\n  'WF' : 'Wallis And Futuna',\r\n  'EH' : 'Western Sahara',\r\n  'YE' : 'Yemen',\r\n  'ZM' : 'Zambia',\r\n  'ZW' : 'Zimbabwe'\r\n};\r\n\r\nconst getCountryName = (countryCode) => {\r\n  if (isoCountries.hasOwnProperty(countryCode)) {\r\n      return isoCountries[countryCode];\r\n  } else {\r\n      return countryCode;\r\n  }\r\n}\r\nconst columns = [\r\n  {\r\n    name: 'Filing Date',\r\n    selector: 'filingdate',\r\n    render: (text) => <a>{text}</a>,\r\n    grow:3\r\n  },\r\n  {\r\n    name: 'Officer Title',\r\n    selector: 'officertitle',\r\n    grow:5\r\n\r\n  },\r\n  {\r\n    name: 'Security Title',\r\n    selector: 'securitytitle',\r\n    grow:5\r\n\r\n  },\r\n  {\r\n    name: 'Exercise Price',\r\n    selector: 'priceexercisable',\r\n\r\n  },\r\n  {\r\n    name: 'Expiration Date',\r\n    selector: 'expirationdate',\r\n\r\n  },\r\n\r\n  {\r\n    name: 'Transaction Price ',\r\n    selector: 'transactionpricepershare',\r\n    sortable: true\r\n  },\r\n  {\r\n    name: 'Transaction Value ($ Mn)',\r\n    selector: 'transactionvalue',\r\n    sortable: true\r\n  }\r\n];\r\n\r\nconst inst_columns= [\r\n  {\r\n    name: 'Calendar Date',\r\n    selector: 'calendardate',\r\n    render: (text) => <a>{text}</a>,\r\n    grow:3\r\n  },\r\n  {\r\n    name: 'Investor Name',\r\n    selector: 'investorname',\r\n    grow:5\r\n\r\n  },\r\n  {\r\n    name: 'Security Type',\r\n    selector: 'securitytype',\r\n    grow:3\r\n\r\n  },\r\n  {\r\n    name: 'Price ',\r\n    selector: 'price',\r\n    sortable: true\r\n  },\r\n    {\r\n      name: 'Net Value ($ Mn)',\r\n      selector: 'value',\r\n      sortable: true\r\n    }\r\n  ]\r\n\r\n  const net_inst_columns =[\r\n    {\r\n      name: 'Calendar Date',\r\n      selector: 'calendardate',\r\n      render: (text) => <a>{text}</a>,\r\n    },\r\n    {\r\n      name: 'Security Type',\r\n      selector: 'securitytype',\r\n      grow:3\r\n\r\n    },\r\n      {\r\n        name: 'Net Value ($ Mn)',\r\n        selector: 'value',\r\n        sortable: true\r\n      }\r\n    ]\r\n/*\r\n\r\n  const sell_config = {\r\n    data: props.sell_value,\r\n    height: 400,\r\n    xField: 'filingdate',\r\n    yField: 'transactionvalue',\r\n    point: {\r\n    size: 3,\r\n    shape: 'circle',\r\n    },\r\n  };\r\n  <Card title=\"Insider Buy\">\r\n    <Area  data: props.buy_value\r\n    height: 400\r\n    xField: 'filingdate'\r\n    yField: 'transactionvalue'\r\n    point: {\r\n    size: 3,\r\n    shape: 'circle',\r\n    } />\r\n    </Card>\r\n    <Divider></Divider>\r\n    <Card title=\"Insider Sell\">\r\n    <Area  {...sell_config} />\r\n    </Card>\r\n  */\r\nlet $primary = \"#7367F0\",\r\n  $success = \"#28C76F\",\r\n  $danger = \"#EA5455\",\r\n  $warning = \"#FF9F43\",\r\n  $info = \"#00cfe8\",\r\n  $label_color_light = \"#dae1e7\"\r\n\r\nlet themeColors = [$primary, $success, $danger, $warning, $info]\r\nclass Report extends React.Component {\r\n  state = {\r\n    docs: [],\r\n  }\r\n  fetchPosts = (props) => {\r\n    let today = new Date();\r\n    today.setDate(today.getDate() - 200);\r\n    today = today.toISOString().slice(0, 10);\r\n    axios.get(`http://api.datanews.io/v1/news?source=wsj.com&size=100&apiKey=08qu938b4y5v8dem2w521v76v&q=${encodeURI(props.data.ticker_name)}&from=${today}&sortBy=date&language=en&country=US`)\r\n    .then(res => {\r\n      let sorted = res.data['hits']\r\n      this.setState({...this.state, docs: sorted });\r\n      console.log(this.state.docs)\r\n    });\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    this.fetchPosts(newProps);\r\n  }\r\n  render() {\r\n    console.log(this.props.data);\r\n    return (\r\n\r\n      <div className=\"site-card-wrapper\">\r\n        \r\n        <Row>\r\n          <Col lg=\"4\" sm=\"12\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>\r\n                  {this.props.data.ticker_name}\r\n                </CardTitle>\r\n              </CardHeader><hr />\r\n              <CardBody>\r\n                <Statistic value={this.props.data.price} />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Divider />\r\n        <ApexAreaCharts themeColors={themeColors} data={this.props.wealth_graph} second=\"1\" title=\"Wealth Graph\" />\r\n        <Divider></Divider>\r\n        <Row gutter={16}>\r\n          <Col lg=\"4\" sm=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <GoalOverview strokeColor=\"#b9c3cd\" success=\"#28C76F\" title=\"Portfolio Health\" percent={this.props.data.company_health} />\r\n                <Divider />\r\n                <Row gutter={20}>\r\n                  <Col span={12}>\r\n                    <p>5 Yr Revenue Growth (%)</p>\r\n                    <Statistic value={this.props.data.rev_growth} />\r\n                  </Col>\r\n\r\n                  <Col span={12}>\r\n                    <p>Revenue Growth Uncertainty (%)</p>\r\n                    <Statistic value={this.props.data.rev_uncertainty} />\r\n                  </Col>\r\n                  <Divider />\r\n                  <Col span={12}>\r\n                    <p>5 Yr Average Profit Margin (%)</p>\r\n                    <Statistic value={this.props.data.profit_margin} />\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <p>5 Yr Average Market Share Growth (%)</p>\r\n                    <Statistic value={this.props.data.market_share_growth} />\r\n                  </Col>\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col lg=\"4\" sm=\"12\">\r\n            <Card><CardBody>\r\n            <GoalOverview  strokeColor=\"#b9c3cd\" success=\"#28C76F\" title=\"Company Yield\" percent={this.props.data.company_yield} />\r\n              <Divider />\r\n              <Row gutter={20}>\r\n                <Col span={12}>\r\n                  <p>5 Yr Average Dividend Yield (%)</p>\r\n                  <Statistic value={this.props.data.dividend_yield} />\r\n                </Col>\r\n\r\n                <Col span={12}>\r\n                  <p>5 Yr Average Earnings Yield (%)</p>\r\n                  <Statistic value={this.props.data.earnings_yield} />\r\n                </Col>\r\n                <Divider />\r\n                <Col span={12}>\r\n                  <p>5 Yr Average Payout Ratio (%)</p>\r\n                  <Statistic value={this.props.data.payout_ratio} />\r\n                </Col>\r\n                <Col span={12}>\r\n                  <p>5 Yr Average Free Cash Flow ($bn)</p>\r\n                  <Statistic value={this.props.data.free_cash_flow} />\r\n                </Col>\r\n              </Row>\r\n              </CardBody></Card>\r\n          </Col>\r\n          <Col lg=\"4\" sm=\"12\">\r\n            <Card><CardBody>\r\n            <GoalOverview strokeColor=\"#b9c3cd\" success=\"#28C76F\" title=\"Company Quality\" percent={this.props.data.company_quality} />\r\n            <Divider />\r\n            <Row gutter={20}>\r\n              <Col span={12}>\r\n                <p>5 Yr Average Debt/Equity (%)</p>\r\n                <Statistic value={this.props.data.debt_to_equity} />\r\n              </Col>\r\n\r\n              <Col span={12}>\r\n                <p>5 Yr Average Return on Invested Capital (%)</p>\r\n                <Statistic  value={this.props.data.return_on_invested_capital} />\r\n              </Col>\r\n              <Divider />\r\n              <Col span={12}>\r\n                <p>5 Yr Average Growth in ROE (%)</p>\r\n                <Statistic  value={this.props.data.roe_growth} />\r\n              </Col>\r\n              <Col span={12}>\r\n                <p>ROE Growth Uncertainty (%)</p>\r\n                <Statistic value={this.props.data.roe_uncertainty} />\r\n              </Col>\r\n            </Row>\r\n            </CardBody></Card>\r\n          </Col>\r\n        </Row>\r\n        <Divider></Divider>\r\n        <Row gutter={16}>\r\n          <Col lg=\"4\" sm=\"12\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>\r\n                  Fair Value\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <p>Fair Value Rating ( / 20)</p>\r\n              <Statistic value={this.props.data.fair_value_score} />\r\n              <Divider></Divider>\r\n              <Row gutter={20}>\r\n                <Col span={12}>\r\n                  <p>Fair Value by Dividend Discount Model ($)</p>\r\n                  <Statistic value={this.props.data.fair_value_ddm} />\r\n                </Col>\r\n\r\n                <Col span={12}>\r\n                  <p>Fair Value by Dividend Discount Model ($)</p>\r\n                  <Statistic value={this.props.data.fair_value_fcf} />\r\n                </Col>\r\n              </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col lg=\"4\" sm=\"12\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>\r\n                  Industry Rank\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n              <Statistic value={this.props.data.industry_rank} />\r\n              <Divider />\r\n              <Row gutter={20}>\r\n                <Col span={12}>\r\n                  <p>Profitability Rank</p>\r\n                  <Statistic  value={this.props.data.profitability_rank} />\r\n                </Col>\r\n\r\n                <Col span={12}>\r\n                  <p>Value Rank</p>\r\n                  <Statistic value={this.props.data.value_rank} />\r\n                </Col>\r\n                <Divider />\r\n                <Col span={24}>\r\n                  <p>Quality Rank</p>\r\n                  <Statistic value={this.props.data.quality_rank} />\r\n                </Col>\r\n              </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col lg=\"4\" sm=\"12\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Market Risk</CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <p>Risk Rating ( / 30)</p>\r\n              <Statistic value={this.props.data.risk_score} />\r\n              <Divider />\r\n              <Row gutter={20}>\r\n                <Col span={12}>\r\n                  <p>Annualized Volatility (%)</p>\r\n                  <Statistic value={this.props.data.vol} />\r\n                </Col>\r\n                <Col span={12}>\r\n                  <p>Max Drawdown (%)</p>\r\n                  <Statistic value={this.props.data.max_drawdown} />\r\n                </Col>\r\n                <Divider />\r\n                <Col span={24}>\r\n                  <p>Correlation with Market</p>\r\n                  <Statistic value={this.props.data.correl} />\r\n                </Col>\r\n              </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n\r\n          <Divider />\r\n          <Col sm=\"5\" lg=\"3\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Insider Rating</CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n              <GoalOverview strokeColor=\"#b9c3cd\" success=\"#28C76F\" percent={this.props.data.net_value_executed_pct} />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Divider></Divider>\r\n          <Col sm=\"12\" lg=\"5\">\r\n            <AreaCharts themeColors={themeColors} data={this.props.buy_value} columns={'calendardate','value'} title=\"Insider Buy\" />\r\n          </Col>\r\n\r\n          <Col sm=\"12\" lg=\"7\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>\r\n                  Top 10 Insider Trades Buy\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n              <DataTable data={this.props.top10_buys}\r\n                columns={columns} scroll={{ x: 1500 }} noHeader\r\n              /></CardBody>\r\n              </Card>\r\n          </Col>\r\n\r\n          <Divider />\r\n          <Col sm=\"12\" lg=\"5\">\r\n            <AreaCharts themeColors={themeColors} data={this.props.sell_value} title=\"Insider Sell\" />\r\n          </Col>\r\n\r\n          <Col sm=\"12\" lg=\"7\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Top 10 Insider Trades Sell</CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n              <DataTable data={this.props.top10_sells}\r\n                columns={columns} scroll={{ x: 1500 }} noHeader\r\n              />\r\n              </CardBody>\r\n              </Card>\r\n          </Col>\r\n          <Divider></Divider>\r\n            <Col sm=\"5\" lg=\"3\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Institutional Rating</CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n              <GoalOverview strokeColor=\"#b9c3cd\" success=\"#28C76F\" percent={this.props.data.net_holding_pct} />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n\r\n\r\n      <Divider />\r\n      <Col sm=\"12\" lg=\"7\">\r\n    <Card title=\"Net Institutional Holdings\">\r\n    <CardHeader>\r\n                <CardTitle>Net Institutional Holdings</CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n      <DataTable  data= {this.props.net_inst_value}\r\n      columns={net_inst_columns} scroll={{ x: 100 }} noHeader\r\n /></CardBody></Card>\r\n    </Col>\r\n    <Col sm=\"12\" lg=\"5\">\r\n    <AreaCharts1 themeColors={themeColors} data={this.props.net_inst_by_date} title=\"Net Institutional Share Holdings by Date\" />\r\n    </Col>\r\n    <Divider />\r\n    <Col sm=\"20\" lg=\"10\">\r\n    <Card>\r\n            <CardHeader>\r\n                <CardTitle>Top 10 Institutional Holdings</CardTitle>\r\n              </CardHeader>\r\n      <CardBody>\r\n      <DataTable  data= {this.props.top10_inst}\r\n      columns={inst_columns} scroll={{ x: 1500 }} noHeader\r\n /></CardBody></Card>\r\n </Col>\r\n        </Row>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Report;\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport Report from \"./Report\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { ChevronDown } from \"react-feather\";\nimport {\n  Card,\n  CardImg,\n  CardTitle,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  Col,\n  Spinner,\n  Container,\n  Row\n} from \"reactstrap\";\n\n\nclass ApexCharts extends React.Component {\n  state = {\n    articles: [],\n    docs: [],\n    buy_value: [],\n    sell_value: [],\n    top10_buys: [],\n    top10_sells: [],\n    net_inst_by_date: [],\n    top10_inst: [],\n    net_inst_value: [],\n    wealth_graph: [],\n    isPostLoading: true\n  }\n  getShares = (net_inst_by_date) => {\n    let net_inst_by_date_shr = []\n      for (let i=0;i<net_inst_by_date.length;i++){\n          if(net_inst_by_date[i].securitytype===\"SHR\"){\n          net_inst_by_date_shr.push(net_inst_by_date[i]);\n        }\n\n      }\n      return net_inst_by_date_shr\n\n  }\n\n  fetchArticles = () => {\n    const articleID = this.props.match.params.articleID;\n    axios.get(`https://theopenstreet.com/api/matrix/${articleID}/`)\n      .then(res => {\n        this.setState({\n          articles: res.data,\n          wealth_graph: (res.data.wealth_graph),\n          buy_value: (res.data.buy_value),\n          sell_value: (res.data.sell_value),\n          top10_buys: (res.data.top10_buys),\n          top10_sells: (res.data.top10_sells),\n          net_inst_by_date: this.getShares(res.data.net_inst_by_date),\n          top10_inst: (res.data.top10_inst),\n          net_inst_value: (res.data.net_inst_value)\n\n        });\n\n      });\n  }\n\n  \n\n  componentDidMount() {\n    this.fetchArticles();\n  }\n\n  render() {\n    \n    if (!this.props.token) {\n      return <Redirect to=\"/\" />;\n    }\n\n    \n    if (this.state.docs.length === 0 & this.state.isPostLoading === false) {\n      this.setState({isPostLoading: true});\n    }\n    if (this.state.docs.length !== 0 & this.state.isPostLoading === true) {\n      this.setState({isPostLoading: false})\n    }\n\n    return (\n    <React.Fragment>\n      \n      <Report data= {this.state.articles} buy_value = {this.state.buy_value} sell_value = {this.state.sell_value} top10_buys = {this.state.top10_buys} top10_sells = {this.state.top10_sells} net_inst_by_date = {this.state.net_inst_by_date} top10_inst = {this.state.top10_inst} net_inst_value = {this.state.net_inst_value} wealth_graph = {this.state.wealth_graph} />\n      \n        \n        \n        \n    </React.Fragment>\n    );\n  }\n\n}\n\nconst mapStatetoProps = state => {\n  return {\n    token: state.auth.token\n  }\n}\n\n\nexport default connect(mapStatetoProps)(ApexCharts);\n"],"sourceRoot":""}